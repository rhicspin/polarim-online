macro repol run='16447.301'
*
*  re-evaluate polarization after noisy channel cleaning,
*  and do simple L/R asymmetry instead of fit
*
*  reads from HBOOK file w/ histos, left open by some calling .kumac (?)
*
*  uses vectors from calling macro pvector.kumac:
*  - PCNT(6), MCNT(6) +/- spin counts for 6 det.; zero for horiz. tgt. det. 2,5
*  - an(1) analyzing power
*
*  get Nevt per chan., pol. +/-/tot
*
if $vexist(nevchp) then; vec/del nevchp; vec/del nevchm; endif;
vec/cre nevchp(72) R 72*0.; vec/cre nevchm(72) R 72*0.;
do i=1,72
  id = 400+[i]
  if $hexist([id]) then; hi/del [id]; endif; hrin [id];
  if $hexist([id]) then; vec/inp nevchp([i]) $hinfo([id],'SUM');
  else; vec/inp nevchp([i]) 0.; endif;
  id = 500+[i]
  if $hexist([id]) then; hi/del [id]; endif; hrin [id];
  if $hexist([id]) then; vec/inp nevchm([i]) $hinfo([id],'SUM');
  else; vec/inp nevchp([i]) 0.; endif;
enddo
* 
*  set polar. # from run #
*
polar = $sigma(int(10*([run]-int([run]))))
*
*  kluge to get params from pvector.kumac vectors:
*  logpar(1) = target orientation: 0=vertical, 1=horizontal, -1=N.A.
*  logpar(2) = analyzing power
*

if $vexist(logpar) then; vec/del logpar; endif; vec/cre logpar(2) R;
if ((pcnt(2).eq.0.).and.(pcnt(5).eq.0.).and.(mcnt(2).eq.0.).and.(mcnt(5).eq.0.)) then
  vec/inp logpar(1) 1.
else
  vec/inp logpar(1) 0.
endif
vec/copy an(1:1) logpar(2:2)
*
*  code for 12-chan. cleaning
*
application comis quit
	subroutine clean12(nevt,mask)
	implicit none
	real nevt(12),mask(12)
	integer i,j,idmax
	real sum1,sumn,sumn2
	real mean,rms
	real dmax
*
*  cuts on chan. ratio to mean-of-resrms/mean
*
	real rrmscut
	data rrmscut / 0.05 /
C	data rrmscut / 0.10 /
*
*
*  init mask
*
	do i=1,12
	   mask(i) = 1.
	end do
*
 100	continue
*
*  sums over OK channels
*
	sum1 = 0.
	sumn = 0.
	sumn2 = 0.
	do i=1,12
	   if(mask(i).ne.0.) then
	      sum1 = sum1 + 1
	      sumn = sumn + nevt(i)
	      sumn2 = sumn2 + nevt(i)**2.
	   endif
	end do
	mean = sumn/sum1
	rms = sqrt(amax1(sumn2/sum1-mean**2,0.))
*
*  done if rms/mean OK
*  ALSO: quit if mean<=0, NEED BETTER FIX???
*
	if(mean.le.0.) go to 900
	if(rms/mean .lt.rrmscut) go to 900
*
*  find and mask out worst deviant
*
	idmax = 0
	dmax = 0.
	do i=1,12
	   if(mask(i).ne.0.) then
	      if(abs(nevt(i)-mean).ge.dmax) then
		 idmax = i
		 dmax = abs(nevt(i)-mean)
	      endif
	   endif
	end do
	mask(idmax) = 0.
	go to 100
*
 900	continue
*
	END
quit
*
if $vexist(n12) then
  vec/del n12
  vec/del m12; vec/del m12p; vec/del m12m;
  vec/del mask; vec/del nchcln;
endif
vec/cre n12(12) R
vec/cre m12(12) R; vec/cre m12p(12) R; vec/cre m12m(12) R;
vec/cre mask(72) R; vec/cre nchcln(6) R;
*
do det=1,6; i1=12*([det]-1)+1; i2=12*[det];
  vec/copy nevchp([i1]:[i2]) n12(1:12)
  call clean12(n12,m12p) 
  vec/copy nevchm([i1]:[i2]) n12(1:12)
  call clean12(n12,m12m)
  sigma m12=m12p*m12m
  vec/copy m12(1:12) mask([i1]:[i2])
  vec/inp nchcln([det]) $sigma(vsum(m12));
enddo
*
*  plot masked chans.
*sigma nevch=nevchp+nevchm; sigma mnevch = mask*nevch;
*set htyp 0; vec/dra nevch; set htyp 1; vec/dra mnevch ! S;
*set ltyp 2; do i=1,6; db=12*[i]+1; exec vdline [db]; enddo; set ltyp 1;
*
*  +/- detector event counts after 12-chan. cleaning
*  except for B2D det. 1,6 (rotated), use uncleaned chan
*  and keep track of channels used
*
sigma mnevchp = mask*nevchp
sigma mnevchm = mask*nevchm
vec/copy nchcln nchuse
if $vexist(cntp) then; vec/del cntp; vec/del cntm; endif;
vec/cre cntp(6) R; vec/cre cntm(6) R;
do det=1,6; i1=12*([det]-1)+1; i2=12*[det];
  if .not.(([polar].eq.2).and.(([det].eq.1).or.([det].eq.6))) then
    vec/copy mnevchp([i1]:[i2]) n12(1:12); vec/inp cntp([det]) $sigma(vsum(n12))
    vec/copy mnevchm([i1]:[i2]) n12(1:12); vec/inp cntm([det]) $sigma(vsum(n12))
  else
    vec/copy nevchp([i1]:[i2]) n12(1:12); vec/inp cntp([det]) $sigma(vsum(n12))
    vec/copy nevchm([i1]:[i2]) n12(1:12); vec/inp cntm([det]) $sigma(vsum(n12))
    vec/inp nchuse([det]) 12.
  endif
enddo
*
*  zero out detectors with less than [nchmin] channels used
*
nchmin = 9
do det=1,6; nch = nchuse([det])
  if [nch].lt.[nchmin] then
    vec/inp cntp([det]) 0.; vec/inp cntm([det]) 0.; vec/inp nchuse([det]) 0.;
  endif
enddo
*
*  zero out 90-deg. det. for horizontal target
*
tgtor = logpar(1)
if [tgtor].eq.1 then
  vec/inp cntp(2) 0.; vec/inp cntm(2) 0.; vec/inp nchuse(2) 0.;
  vec/inp cntp(5) 0.; vec/inp cntm(5) 0.; vec/inp nchuse(5) 0.;
endif
*
*  code for cross asymmetry
*
application comis quit
	subroutine crass(cntp,cntm,nch,asym,easym)
	implicit none
	real cntp(6),cntm(6),nch(6),asym,easym
*
	real npr,npl,nmr,nml,nratio,enratio
	real accr,accl,acc
*
*  lever arm cosines each det.
*
	real c(6)
	data c/ 0.7071 , 1. , 0.7071 , 0.7071 , 1. , 0.7071 /
*
*
*  +/- L/R sums, cross ratio
*
	npr = cntp(1)+cntp(2)+cntp(3)
	npl = cntp(4)+cntp(5)+cntp(6)
	nmr = cntm(1)+cntm(2)+cntm(3)
	nml = cntm(4)+cntm(5)+cntm(6)
	nratio = (npr*nml-nmr*npl)/(npl*nmr+nml*npr)
	enratio = (2.*sqrt(npr*nml*nmr*npl)/(npl*nmr+nml*npr)**2) *
     +			sqrt(npr*nml*(nmr+npl)+nmr*npl*(npr+nml))
*
*  lever arm & acceptance(=nch) factors
*
	accr = (nch(1)*c(1)+nch(2)*c(2)+nch(3)*c(3)) /
     +						(nch(1)+nch(2)+nch(3))
	accl = (nch(4)*c(4)+nch(5)*c(5)+nch(6)*c(6)) /
     +						(nch(4)+nch(5)+nch(6))
	acc = accr + accl
*
	asym = nratio/acc
	easym = enratio/acc
*
	END
quit
*
nright = nchuse(1)+nchuse(2)+nchuse(3)
nleft  = nchuse(4)+nchuse(5)+nchuse(6)
*
*  need some chan. each side L&R for asym. measure
*
if (([nright].le.0).and.([nleft].le.0)) then
*
  mess NO L/R ASYMMETRY MEASURE POSSIBLE [nright] [nleft]
  if $vexist(repolv) then; vec/del repolv; endif;
  vec/cre repolv(2) R -9999. -9999.
  exitm 3
*
else
*
  if $vexist(asymv) then; vec/del asymv; vec/del easymv; endif;
  vec/cre asymv(1); vec/cre easymv(1);
  call crass(cntp,cntm,nchuse,asymv,easymv)
  asym = asymv(1); easym = easymv(1);
*
  an = logpar(2)
  pol = $EVAL([asym]/[an])
  epol = $EVAL([easym]/[an])
*
  if $vexist(repolv) then; vec/del repolv; endif;
  vec/cre repolv(2) R [pol] [epol]
*  mess [asym] [an] [pol] [epol]
  exitm 0
*
endif
*
return
